# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

  ############## INITIALIZE #################

  before_all do
      ENV["FIREBASE_TOKEN"] = "1//09haJ-T_OeeFjCgYIARAAGAkSNwF-L9IrnMB610hJKNzUeWMB0xQQJHh5t2aFGEvtgHnGHBeMCHTtvee9sRWBlJ3gVHlYsh7_9v0"
      # sh("git fetch")
  end

  ##################################################################################################################################
  # TEST
  ##################################################################################################################################

  lane :test do |options|
        type = options[:type]

        # "Runs all the Unit Tests on Release variant"
        if type.nil? || type == 'unit'
            gradle(task: "test")
        end

         # "Runs all the Unit Tests on Release variant"
        if type == 'unitRelease'
            gradle(task: "testReleaseUnitTest")
        end

        # "Runs all the Instrumented(Android) Tests on Release and Debug variants. An android device has to be connected."
        if type == 'android'
            gradle(task: "connectedAndroidTest")
        end

        # "Runs all Unit Tests and Android Tests. An android device has to be connected."
        if type == 'all'
            gradle(task: "test")
            gradle(task: "connectedAndroidTest")
        end
   end

  ##################################################################################################################################
  # UPLOAD TO FIREBASE APP DISTRIBUTION
  ##################################################################################################################################

  # Adjust the `build_type` and `flavor` params as needed to build the right APK for your setup
  # To get a list of all available parameters for the gradle action, run: fastlane action gradle

  lane :beta do |options|

        # 1- Make version code and name incrementation

        version = options[:versionChange]

        if version.nil? || version == 'patch'
            gradle(task: "doPatchVersionIncrement")
        end

        if version == 'major'
            gradle(task: "doMajorVersionIncrement")
        end

        if version == 'minor'
            gradle(task: "doMinorVersionIncrement")
        end

        gradle(task: "doBuildNumberIncrement")
        gradle(task: "doBuildNumberBetaIncrementValueIncrement")

        # 2- Run unit tests for all variants
        gradle(task: "clean")
        gradle(task: "test")

        # 3- Build Release APK
        gradle(task: "clean")
        gradle(task: 'assemble', build_type: 'Release')

        # 4- push version bump commit

        properties = property_file_read(file: "app/version.properties")
        versionMajor = properties['VERSION_NAME_MAJOR']
        versionMinor = properties['VERSION_NAME_MINOR']
        versionPatch = properties['VERSION_NAME_PATCH']
        versionCode = properties['VERSION_CODE']
        versionName = "#{versionMajor}.#{versionMinor}.#{versionPatch}"

        sh "git add .. ; git commit -m 'Version bump : versionCode = #{versionCode} | versionName = #{versionName}'"
        push_to_git_remote

        # 5- Send APK to Firebase
        firebase_app_distribution(app: "1:1087940686958:android:64e91bdf7064a92bb6627f", groups: "qa-team")
  end

  ##################################################################################################################################
  # UPLOAD TO GOOGLE PLAY
  ##################################################################################################################################

  desc "Deploy a new version to the Google Play"
  lane :deploy do
        gradle(task: "clean assembleRelease")
        upload_to_play_store
  end

end
