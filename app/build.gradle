plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'jacoco'
}

apply from: 'properties-util.gradle'
apply from: 'version-utils.gradle'

android {

    app.versionCode = readVersionCode()
    app.versionName = readVersionName()

    compileSdkVersion app.compileSdk
    buildToolsVersion app.buildTools

    defaultConfig {
        applicationId "com.plumbers.mvvm"
        minSdkVersion app.minSdk
        targetSdkVersion app.targetSdk
        versionCode app.versionCode
        versionName app.versionName
        buildConfigField("java.lang.String", "API_BASE_URL", apiDependencies.baseUrl)
        buildConfigField("java.lang.String", "API_KEY", apiDependencies.apiKey)
        buildConfigField("java.lang.String", "API_IMAGE_PREFIX", apiDependencies.imagePrefix)
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    signingConfigs {
        debug {
            keyAlias 'debugKey'
            storeFile file('../app/key/debugKey')
            storePassword 'icmens'
            keyPassword 'plumbers'
        }
        release {
            keyAlias 'releaseKey'
            storeFile file('../app/key/releaseKey')
            storePassword 'icmens'
            keyPassword 'plumbers'
        }
    }

    lintOptions {
        abortOnError false
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    addDependencies(dependencies, appDependencies)
}

task coverageReport(type: JacocoReport, dependsOn: ['testReleaseUnitTest']) {
    //uiTestsTaskName
    group = "Reporting"
    description = "Generate Jacoco coverage reports on the build."

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/com/example/databinding/*',
            '**/com/example/generated/callback/*',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/di/module/*',
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module.*',
            '**/*Dagger*.*',
            '**/*MembersInjector*.*',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            '**/*$Result.*', /* filtering `sealed` and `data` classes */
            '**/*$Result$*.*'/* filtering `sealed` and `data` classes */
    ]

    classDirectories.setFrom(files([
            fileTree(
                    dir: "${buildDir}/tmp/kotlin-classes/release",
                    excludes: fileFilter
            )
    ]))

    def coverageSourceDirs = [
            "src/main/java",
            "src/devRelease/java",
            "src/release/java"
    ]
    additionalSourceDirs.from(files(coverageSourceDirs))
    sourceDirectories.from(files(coverageSourceDirs))
    executionData.from(fileTree(dir: "build", includes: ["**/*.exec", "**/*.ec"]))

    reports {
        html {
            enabled true
            destination file('../build/coverage-report/html/app/')
        }
    }
}
